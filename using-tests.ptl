{ # concepts
  #{
    Special casing (these evaluate to themselves):
    - literals (number 1, string "hello", map [], block {}, etc.), 
    - parameters (@n / @n[...])
  }#

  # hence, `using` allows you to early bind values for the params in the corresponding block of a sentence template (at the time)
  hello | : {}
  sentence template | : {}

  { @1 } # evaluates to a block that evaluates to its 1st param
  using @1 # evaluates to a block that evaluates to the 1st param of the outer block
  { @1 @2 } # evaluates to a block that evaluates to its 2nd param (@1; @2; - two complete sentences)
  using @1 @2 # evaluates to a block that evaluates to the 1st param of the outer block; (end of sentence) evaluates to the 2nd parameter of the outer block
  # ie. using @1; @2; - two complete sentences

  { hello 6 } # evaluates to a block that runs `hello` with the value `6`
  using hello 6 # greadily evaluates `6`, then evaluates to a clojure of { hello <that value> } (6 was from the outer context)
  { hello sentence template 5 } # evaluates to a block that evaluates to the result of `hello |` with the result of `sentence template |` with 5
  using hello sentence template 5 # greadily evaluates `sentence template 5`, then evaluates to a clojure of { hello <that value> } - doesn't evaluate `hello` until the resulting clojure/block is run
  { hello @1 } # evaluates to { hello <1st param> }
  using hello @1 # evaluates to a clojure of { hello <1st param of outer block> }

  { hello @1[block] } # evaluates to { hello <blocks in 1st param> }
  using @1[block] # evaluates to a clojure of { hello <blocks in 1st param of outer block> }

  an | example | : { @1 + @2 }

  { an 2 example 3 } # binds both params
  using an 2 example 3 # binds both params
  { an 2 example @1 } # binds one param
  using an 2 example # binds one param
  { an @1 example @2 } # binds neither param
  using an example # binds neither param, but uses the same block as `an | example |`
}

# USE-CASES

example { # not
  not | : {
    param : @1[block]

    { not @1[block] } # doesn't work - can't get @1 of outer block inside inner block
    using not param   # doesn't work - still greadily evaluates param (sentence assigned a block vs. a block - GRRR)
    { not param }     # works (clojure) - returns a block that runs `not |` with the evaluated value of `param`
  }

  # Equivalent ??? - try to avoid two ways of saying the same thing
  not | : {
    param : @1[block]
    { not param }
  }
  not | : { using not @1[block] } # @1[block] doesn't evaluate the block - it evaluates *to* the block

  not map
}

example { # restricted
  # `using` often reads better - fewer symbols
  restricted [using nowhere for removing, using nowhere for adding] []
  # vs.
  restricted to [{ nowhere for removing }, { nowhere for adding }] []
}

example { # sequence
  sequence from | : {
    counter : mutable @1[number] - 1

    # could do this
    { translate counter through using + 1 } # bind counter lexically, return a clojure
    # lexical binding is technically late-bound, but as sentence templates are constant (`counter` can't be re-bound), then this makes no difference

    # or could do this
    add one to | : { translate @1 through using + 1 } # have to define a sentence template and block to use first
    using add one to counter # bind counter's value dynamically, return a clojure
    # again, `using` binding is technically early-bound (evaluates to a number and binds that), but constant sentences make this make no difference
  }
  sequence from 0

  # NOTE: This is a bad way of doing this anyway - it's only to demonstrate `using`.
  add one | : { translate @1 through using + 1 }
  sequence | from | : {
    counter : mutable @2[number]
    update | : @1[block]

    { update counter }   # could do this
    using update counter # or this

    #{
      Note: Can't do:
      { update @1[block] }    # parameter is of inner function, not outer
      using @1[block] counter # `using` takes a sentence *template* - unless `| |` is defined, @1[block] ends the sentence template, excluding counter
    }#
  }
  sequence using add one from 0
}
