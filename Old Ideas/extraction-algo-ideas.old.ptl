#{
    I tried:
    - special-casing the bottom level (eg. a `number` is a primitive number, or a map with a number in it)
        - doesn't work with higher composition level custom types
        - doesn't work with custom composites

    - moving that special case to every case (all types must check for an array of X)
        - moves us back to square one - doesn't fix the problem

    Finally, an answer:
    - keep the automatic wrapping of primitives in a map
    - keep the behaviour of `apply`, `transform`, `transform each`, and `combine`
    - make `number`, etc. a map of a block (it already was), and the inner block execute against the
        primitive value of maps it's extracting from (ie. only a primitive number is a `number`).
    - make custom ordinary types and custom composite types work the same way
    - make `extract`/`@n[]` dictate the behaviour of what all types represent
        - makes ALL TYPES (literals, primitive, custom composite, and custom) be allow 'a map of an item is an item'.
        - in fact, it usees a recursive definition for 'one item'
}#

#{ Not Numbers
------------------ }#

[ [META], [ [META], [[META], 6], [[META], 9] ] ] # not a number

# ------------------

[[{}]]
=
#        V------------------------V  contains a map
[[META], [                        ]]
        [[META], [            ]] # also contains a map
                    [[META], {}]   # contains a raw block
=
[[META], [[META], [[META], {}]]]

# ------------------

combine {}
=
[[META], [{}]]
->
[[META], {} ]
# ^           ^ - removed (no 2nd level to remove)
#          ^^ - ignores non-maps, so this becomes:
=
[]       # language
=
[[META]] # impl

# ------------------

combine [{}, {}]
=
[[META], [                           ]]
        [[META], {}],  [[META], {}]
->
[[META], [                           ]]
        [[META], {}],  [[META], {}]
#        ^^          ^   ^          ^^ - gone (two levels)
[[META], {}, {}]
