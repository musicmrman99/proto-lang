references modules from [
    "game-2d" --> [
        "objects",
        "time",
        "input",
        "physics"
    ]
]

#{ The 2D game library looks like:
    [
        "game-2d" --> [ # Including (among other things):
            "objects",  # defining game objects, game event definition/handling (including the 'game' object itself
                        # that manages global stuff, like top-level state shifting, eg. main menu to in-game)
            "time",     # manages timing (eg. durations) and dates
            "graphics", # layering, FX (eg. paralax), UI components, text, environment systems (tilemaps, polygon-based,
                        # dynamic), sprites, shaders, animations, particles, lighting, full rendering pipeline
            "audio",    # music, sound FX
            "input",    # keyboard, mouse, keybindings / cross-platform input event handling
            "physics",  # simulation, collision
            "ai",       # pathfinding, actions
            "storage"   # saving and loading game state, user-generated content
            "network"   # networking?
        ]
    ]
}#

{ # Assumed
    extract | from | : {}
    |.| : { transform @2 to associated value in @1 } # needs to be left associative (which is default)

    #{objects}# : module from {
        actor | : symbolic type from [...] # "input source" is [] by default (ie. no input)
        actor : { using actor }

        game : module from {{
            all actors : [typed using actor [], ...] # list of all actors in the game
            all players : [typed using actor typed using player [...]]
        }}
        game | : { #{ Performs the given request for game content }# }
        actors : { #{ Returns a game request for all actors. If given to `game |`, this will fetch all game actors. }# }
        players : { extract player from game actors } # effectively this, but actually optimised
    }
    #{input}# : module from {
        input source | : symbolic type from []
        input source : { using input source }

        device | : symbolic type from [...]
        device : { using device }

        keymap | : input source and symbolic type from ["device" --> device, "bindings" --> []] # empty by default
        keymap : { using keymap }

        set input source for | to | : {
            transform @1[actor] to combine [@1[actor], ["input source" --> @2[input source]]]
        }
    }

    # ... lots of other things, including mapping space to jump, and the basic inputs, physics, etc. of jumping
}

# Workings:

#{
    you don't want to modify global state in a hook-based approach
    you don't want to re-specify + replace, or you can't modify more than once

    basically, you need:
    - base behaviour
    - a way to extend without modifying global state, and without the order of application of changes mattering

    effectively, the game-test.lua code is trait-like inheritance that modifies parent state (ie. breaks encapsulation boundaries)

    that is a somewhat hard problem.
}#

#{
    "objects",  # defining game objects, game event definition/handling (including the 'game' object itself
                # that manages global stuff, like top-level state shifting, eg. main menu to in-game)
    "time",     # manages timing (eg. durations) and dates
    "graphics", # layering, FX (eg. paralax), UI components, text, environment systems (tilemaps, polygon-based,
                # dynamic), sprites, shaders, animations, particles, lighting, full rendering pipeline
    "audio",    # music, sound FX
    "input",    # keyboard, mouse, keybindings / cross-platform input event handling
    "physics",  # simulation, collision
    "ai",       # pathfinding, actions
    "storage"   # saving and loading game state, user-generated content
    "network"   # networking?
}#

mechanic | : symbolic type from [
    "states" --> [string --> [block]]
    "transitions" --> [[string --> string] --> [block]]
]
mechanic from | : { typed using mechanic @[mechanic] }
mechanic : { using mechanic }

running mechanic | : symbolic type from [
    "state" --> string,
    "mechanic" --> 
] and mechanic
running mechanic : { using live mechanic }

initiate | mechanic on | : { # will this work? 
    # You can only initiate mechanics on actors
    transform each @2[actor] also passing @1[mechanic] through {
        # TRANSFORM EACH COMBINES ITSELF
        #?
        combine [@1, ]
    }
}

move | to state | : {
    transform @1[live mechanic] also passing @2[string] through {
        possible transitions : extract [[@1."state" --> string] --> [block]] from @1
        transform @2[string] through associated block in @1[live mechanic]
    }
}

jump : mechanic from [
    ["init" --> "ready"] --> [
        { #{ initialise anything needed for this mechanic, including a way of switching to the "ready" state }# }
    ],

    ["ready" --> "jumping"] --> [
        { #{ deal with the physics of starting a jump, including a way of switching to the "falling" state }# }
    ],

    ["jumping" --> "falling"] --> [
        { #{ deal with the physics of starting to fall, including a way of switching to the "landed" state }#}
    ],

    ["falling" --> "landed"] --> [
        { #{ deal with the physics of landing, including a way of switching to the "ready" state }#}
    ],

    ["landed" --> "ready"] --> [
        { #{ deal with the physics of going back to normal flow, including a way of switching to the "jumping" state }#}
    ]
]



transform each players through {
    @[player] # --> "input source" --> ] # not like this - it's inside of player
}
