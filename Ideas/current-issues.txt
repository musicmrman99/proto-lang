- underlying map storage (one = array with one)

- map extraction, inc. from parameters
  - where is metadata stored?
  - how is metadata stored?
  - how do default map sentences interact with metadata?
  - we somehow do not consider a map-type object and that object wrapped in a map at any level of composition above level 1 to be the same thing, so level 1 is special-cased?
  - is the 'wrapping map' for metadata the same as a composition level 1 (internal) map, but for all maps objects?
  - if so, does that mean that the special-casing for allowing direct manipulation of composition level 1 maps is inappropriate?

- type nominality checking
  - how can we enforce nominal-only checking?
  - where should this be enforced?
    - in the extract sentence? No.
    - on the type?
      - ie. copying the internal map and metadata map (but not data map) of the type block, then mutating the metadata on the copy?
    - on the object being extracted from?

- type nominality by reference (no encapsulation)
  - procedural types are value-based
  - structural types are value-based (because they're procedural under the hood)
  - symbolic/nominal types are symbol-based
  - which means you MUST allow the client to access the type
  - which is also how you add the type to custom objects
  - so it is IMPOSSIBLE to encapsulate the type without it being useless (because you cannot extract things using it)
    - does this matter?
